/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type EventStruct = {
  oneTimeBuy: boolean;
  token: boolean;
  onsite: boolean;
  owner: string;
  time: BigNumberish;
  totalQuantity: BigNumberish;
  totalQntySold: BigNumberish;
  name: string;
  topic: string;
  location: string;
  city: string;
  ipfsHash: string;
  ticketLimited: boolean[];
  tktQnty: BigNumberish[];
  prices: BigNumberish[];
  tktQntySold: BigNumberish[];
  categories: string[];
};

export type EventStructOutput = [
  boolean,
  boolean,
  boolean,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  boolean[],
  BigNumber[],
  BigNumber[],
  BigNumber[],
  string[]
] & {
  oneTimeBuy: boolean;
  token: boolean;
  onsite: boolean;
  owner: string;
  time: BigNumber;
  totalQuantity: BigNumber;
  totalQntySold: BigNumber;
  name: string;
  topic: string;
  location: string;
  city: string;
  ipfsHash: string;
  ticketLimited: boolean[];
  tktQnty: BigNumber[];
  prices: BigNumber[];
  tktQntySold: BigNumber[];
  categories: string[];
};

export type TicketStruct = {
  eventId: BigNumberish;
  seatNo: BigNumberish;
  boughtLocation: string;
  eventLocation: string;
};

export type TicketStructOutput = [BigNumber, BigNumber, string, string] & {
  eventId: BigNumber;
  seatNo: BigNumber;
  boughtLocation: string;
  eventLocation: string;
};

export type SoldTicketStructStruct = {
  token: boolean;
  eventId: BigNumberish;
  seatNo: BigNumberish;
  buyer: string;
  usdtPrice: BigNumberish;
  phnxPrice: BigNumberish;
  boughtTime: BigNumberish;
  totalTktsSold: BigNumberish;
  categoryTktsSold: BigNumberish;
  category: string;
};

export type SoldTicketStructStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  token: boolean;
  eventId: BigNumber;
  seatNo: BigNumber;
  buyer: string;
  usdtPrice: BigNumber;
  phnxPrice: BigNumber;
  boughtTime: BigNumber;
  totalTktsSold: BigNumber;
  categoryTktsSold: BigNumber;
  category: string;
};

export type BuyTicketStruct = {
  eventId: BigNumberish;
  categoryIndex: BigNumberish;
  boughtLocation: string;
};

export type BuyTicketStructOutput = [BigNumber, BigNumber, string] & {
  eventId: BigNumber;
  categoryIndex: BigNumber;
  boughtLocation: string;
};

export interface DaoEventsV2Interface extends utils.Interface {
  functions: {
    "USDT()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyTicket((uint256,uint256,string))": FunctionFragment;
    "changeToken(address)": FunctionFragment;
    "createEvent((bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))": FunctionFragment;
    "eventIds()": FunctionFragment;
    "eventRevenue(uint256)": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "eventsOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCategories(uint256)": FunctionFragment;
    "getEventsCount()": FunctionFragment;
    "getPrices(uint256)": FunctionFragment;
    "getTicket(uint256)": FunctionFragment;
    "getTicketLimited(uint256)": FunctionFragment;
    "getTktQnty(uint256)": FunctionFragment;
    "getTktQntySold(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticketIds()": FunctionFragment;
    "ticketsOf(address)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BuyTicketStruct]
  ): string;
  encodeFunctionData(functionFragment: "changeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [EventStruct]
  ): string;
  encodeFunctionData(functionFragment: "eventIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eventsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketLimited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTktQnty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTktQntySold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketIds", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketLimited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTktQnty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTktQntySold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CreatedEvent(address,uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SoldTicketDetails1(tuple)": EventFragment;
    "SoldTicketDetails2(tuple,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldTicketDetails1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldTicketDetails2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type CreatedEventEvent = TypedEvent<
  [string, BigNumber, EventStructOutput],
  { owner: string; eventId: BigNumber; arg2: EventStructOutput }
>;

export type CreatedEventEventFilter = TypedEventFilter<CreatedEventEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SoldTicketDetails1Event = TypedEvent<
  [TicketStructOutput],
  { arg0: TicketStructOutput }
>;

export type SoldTicketDetails1EventFilter =
  TypedEventFilter<SoldTicketDetails1Event>;

export type SoldTicketDetails2Event = TypedEvent<
  [SoldTicketStructStructOutput, string],
  { arg0: SoldTicketStructStructOutput; owner: string }
>;

export type SoldTicketDetails2EventFilter =
  TypedEventFilter<SoldTicketDetails2Event>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DaoEventsV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaoEventsV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDT(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTicket(
      _buyTicket: BuyTicketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _event: EventStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEventsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TicketStructOutput] & { _ticket: TicketStructOutput }>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticketIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  USDT(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyTicket(
    _buyTicket: BuyTicketStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _event: EventStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventIds(overrides?: CallOverrides): Promise<BigNumber>;

  eventRevenue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string
    ] & {
      oneTimeBuy: boolean;
      token: boolean;
      onsite: boolean;
      owner: string;
      time: BigNumber;
      totalQuantity: BigNumber;
      totalQntySold: BigNumber;
      name: string;
      topic: string;
      location: string;
      city: string;
      ipfsHash: string;
    }
  >;

  eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCategories(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getPrices(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTicket(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TicketStructOutput>;

  getTicketLimited(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  getTktQnty(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTktQntySold(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

  ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    USDT(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTicket(
      _buyTicket: BuyTicketStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    createEvent(_event: EventStruct, overrides?: CallOverrides): Promise<void>;

    eventIds(overrides?: CallOverrides): Promise<BigNumber>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TicketStructOutput>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CreatedEvent(address,uint256,tuple)"(
      owner?: string | null,
      eventId?: null,
      undefined?: null
    ): CreatedEventEventFilter;
    CreatedEvent(
      owner?: string | null,
      eventId?: null,
      undefined?: null
    ): CreatedEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SoldTicketDetails1(tuple)"(
      undefined?: null
    ): SoldTicketDetails1EventFilter;
    SoldTicketDetails1(undefined?: null): SoldTicketDetails1EventFilter;

    "SoldTicketDetails2(tuple,address)"(
      undefined?: null,
      owner?: null
    ): SoldTicketDetails2EventFilter;
    SoldTicketDetails2(
      undefined?: null,
      owner?: null
    ): SoldTicketDetails2EventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyTicket(
      _buyTicket: BuyTicketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEvent(
      _event: EventStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventIds(overrides?: CallOverrides): Promise<BigNumber>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicket(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      _buyTicket: BuyTicketStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _event: EventStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
